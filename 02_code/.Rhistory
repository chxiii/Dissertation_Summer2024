####### (b) #######
# Calculate degree of freedom
df <- (3 - 1) * (2 - 1)
# Calculate p value
p_value <- 1 - pchisq(x_square_value, df)
print(p_value)
# Set alpha
alpha <- 0.1
# Check chi-square value with 0.1 alpha
critical_chisq <- qchisq(1 - alpha, df)
print(critical_chisq)
# Compared with p value and alpha
if (p_value > alpha) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
# Another way: compared with critical level and chi-square results
if (x_square_value < critical_chisq) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
####### (c) #######
# According to (a), we have calculated expected frequencies
# Now we can calcualte residual by (frequencies - expected values)
resi11 <- 7 - e11; resi12 <- 7 - e12; resi13 <- 1 - e13;
resi21 <- 6 - e21; resi22 <- 14 - e22; resi23 <- 7 - e23;
# Calculate standard residual by [residual / sqrt(expected value)]
s_resi11 <- resi11/sqrt(e11*(1-(13/42))*(1-(15/42)))
s_resi12 <- resi12/sqrt(e12*(1-(21/42))*(1-(15/42)))
s_resi13 <- resi13/sqrt(e13*(1-(8/42))*(1-(15/42)))
s_resi21 <- resi21/sqrt(e21*(1-(13/42))*(1-(27/42)))
s_resi22 <- resi22/sqrt(e22*(1-(21/42))*(1-(27/42)))
s_resi23 <- resi23/sqrt(e23*(1-(8/42))*(1-(27/42)))
# Print and check the results
cat(s_resi11, s_resi12, s_resi13,"\n", s_resi21, s_resi22, s_resi23)
reg_sca <- ggplot(mea_y, aes(x=bar_x, y=bar_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Gender") +
scale_x_discrete(labels=c("Male", "Female")) +
ylim(0,35) +
theme_bw()
# Import package
# install.packages("reshape2")
# install.package("ggplot2") # If not install, install the package
library(reshape2)
library(ggplot2)
############## Question 1 ##############
####### (a) #######
# Formulate the row of cross table
class_type <- c(rep("Upper class", 27), rep("Lower class", 15))
class_type <- factor(class_type)
# Formulate the columns of cross table
bribe_type <- c(rep("Not stopped", 14), rep("Bribe requested", 6),
rep("Stopped warning", 7),
rep("Not stopped", 7), rep("Bribe requested", 7),
rep("Stopped warning", 1))
bribe_type <- as.factor(bribe_type)
# Check cross table
table(class_type, bribe_type)
# Calculate row and columns counts
row_1 <- 15 ; row_2 <- 27
col_1 <- 13 ; col_2 <- 21; col_3 <- 8
n <- 42
# Calculate expected frequencies
e11 <- (row_1 * col_1)/n; e12 <- (row_1 * col_2)/n; e13 <- (row_1 * col_3)/n
e21 <- (row_2 * col_1)/n; e22 <- (row_2 * col_2)/n; e23 <- (row_2 * col_3)/n
# Calculate Chi-squared Value
x11 <- (7 - e11)^2/e11; x12 <- (7 - e12)^2/e12; x13 <- (1 - e13)^2/e13
x21 <- (6 - e21)^2/e21; x22 <- (14 - e22)^2/e22; x23 <- (7 - e23)^2/e23
# Calculate chi-square value and print
x_square_value <- x11 + x12 + x13 + x21 + x22 + x23
print(x_square_value)
####### (b) #######
# Calculate degree of freedom
df <- (3 - 1) * (2 - 1)
# Calculate p value
p_value <- 1 - pchisq(x_square_value, df)
print(p_value)
# Set alpha
alpha <- 0.1
# Check chi-square value with 0.1 alpha
critical_chisq <- qchisq(1 - alpha, df)
print(critical_chisq)
# Compared with p value and alpha
if (p_value > alpha) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
# Another way: compared with critical level and chi-square results
if (x_square_value < critical_chisq) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
####### (c) #######
# According to (a), we have calculated expected frequencies
# Now we can calcualte residual by (frequencies - expected values)
resi11 <- 7 - e11; resi12 <- 7 - e12; resi13 <- 1 - e13;
resi21 <- 6 - e21; resi22 <- 14 - e22; resi23 <- 7 - e23;
# Calculate standard residual by [residual / sqrt(expected value)]
s_resi11 <- resi11/sqrt(e11); s_resi12 <- resi12/sqrt(e12);
s_resi13 <- resi13/sqrt(e13)
s_resi21 <- resi21/sqrt(e21); s_resi22 <- resi22/sqrt(e22);
s_resi23 <- resi23/sqrt(e23)
# Print and check the results
cat(s_resi11, s_resi12, s_resi13,"\n", s_resi21, s_resi22, s_resi23)
####### (d) #######
# Draw a heat map to visualize the differences between standard residual
# Make a matrix about standard residual
s_resi_mat <- matrix(
c(s_resi11, s_resi12, s_resi13, s_resi21, s_resi22, s_resi23),
nrow = 2, ncol = 3, byrow = TRUE)
# Give colnames and rownames in matrix
colnames(s_resi_mat) <- c("Bribe requested", "Not stopped", "Stopped warning")
rownames(s_resi_mat) <- c("Lower class", "Upper class")
# Transfer matrix into long data table to draw ggplot picture
s_resi_long <- melt(s_resi_mat)
print(s_resi_long)
# Use ggplot to draw heatmap
s_resi_heatmap <- ggplot(s_resi_long, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="black", size=0.3) +
scale_fill_gradient(low="#D0E7D2", high="#618264") +
labs(title="Heatmap: Standard Residual",
x="Bribe Type", y="Class Type") +
theme_bw()
print(s_resi_heatmap)
############## Question 2 ##############
####### (a) #######
####### (b) #######
# Import data from website link
df <- readr::read_csv(
"https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# Set regression's dependent variable and independent variable
reg_y <- df$water; reg_x <- df$reserved
# Because the independent variable is categorical,
# so draw a bar plot instad of scatter
# Draw a scatter to see differences between these two variables
# Create a data frame about mean and upper, lower ci
reg_mean_ci <- aggregate(reg_y ~ reg_x, data=df, FUN=function(x){
mea_y <- mean(x)
ci <- t.test(x)$conf.int
return <- (c(mea_y, ci[1], ci[2]))
})
# Create x and y for point plot
sca_x <- c("0", "1"); sca_y <- c(12.18, 14.21)
# Create lowerci and upperci for point plot
lower_ci <- reg_mean_ci$reg_y[,2]; upper_ci <- reg_mean_ci$reg_y[,3]
reg_sca <- ggplot(mea_y, aes(x=bar_x, y=bar_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Gender") +
scale_x_discrete(labels=c("Male", "Female")) +
ylim(0,35) +
theme_bw()
reg_y <- df$water; reg_x <- df$reserved
reg_mean_ci <- aggregate(reg_y ~ reg_x, data=df, FUN=function(x){
mea_y <- mean(x)
ci <- t.test(x)$conf.int
return <- (c(mea_y, ci[1], ci[2]))
})
reg_sca <- ggplot(reg_mean_ci, aes(x=bar_x, y=bar_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Reversed") +
scale_x_discrete(labels=c("No", "Yes")) +
ylim(0,35) +
theme_bw()
reg_sca
reg_sca <- ggplot(reg_mean_ci, aes(x=sca_x, y=sca_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Reversed") +
scale_x_discrete(labels=c("No", "Yes")) +
ylim(0,35) +
theme_bw()
reg_sca
# Create x and y for point plot
sca_x <- c("0", "1"); sca_y <- c(14.74, 23.99)
# Create lowerci and upperci for point plot
lower_ci <- reg_mean_ci$reg_y[,2]; upper_ci <- reg_mean_ci$reg_y[,3]
reg_sca <- ggplot(reg_mean_ci, aes(x=sca_x, y=sca_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Reversed") +
scale_x_discrete(labels=c("No", "Yes")) +
ylim(0,35) +
theme_bw()
reg_sca
# Create a regression model
reg_mod <- lm(reg_y ~ reg_x, data=df)
summary(reg_mod)
# Import package
# install.packages("reshape2")
# install.package("ggplot2") # If not install, install the package
library(reshape2)
library(ggplot2)
############## Question 1 ##############
####### (a) #######
# Formulate the row of cross table
class_type <- c(rep("Upper class", 27), rep("Lower class", 15))
class_type <- factor(class_type)
# Formulate the columns of cross table
bribe_type <- c(rep("Not stopped", 14), rep("Bribe requested", 6),
rep("Stopped warning", 7),
rep("Not stopped", 7), rep("Bribe requested", 7),
rep("Stopped warning", 1))
bribe_type <- as.factor(bribe_type)
# Check cross table
table(class_type, bribe_type)
# Calculate row and columns counts
row_1 <- 15 ; row_2 <- 27
col_1 <- 13 ; col_2 <- 21; col_3 <- 8
n <- 42
# Calculate expected frequencies
e11 <- (row_1 * col_1)/n; e12 <- (row_1 * col_2)/n; e13 <- (row_1 * col_3)/n
e21 <- (row_2 * col_1)/n; e22 <- (row_2 * col_2)/n; e23 <- (row_2 * col_3)/n
# Calculate Chi-squared Value
x11 <- (7 - e11)^2/e11; x12 <- (7 - e12)^2/e12; x13 <- (1 - e13)^2/e13
x21 <- (6 - e21)^2/e21; x22 <- (14 - e22)^2/e22; x23 <- (7 - e23)^2/e23
# Calculate chi-square value and print
x_square_value <- x11 + x12 + x13 + x21 + x22 + x23
print(x_square_value)
####### (b) #######
# Calculate degree of freedom
df <- (3 - 1) * (2 - 1)
# Calculate p value
p_value <- 1 - pchisq(x_square_value, df)
print(p_value)
# Set alpha
alpha <- 0.1
# Check chi-square value with 0.1 alpha
critical_chisq <- qchisq(1 - alpha, df)
print(critical_chisq)
# Compared with p value and alpha
if (p_value > alpha) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
# Another way: compared with critical level and chi-square results
if (x_square_value < critical_chisq) {
print("Reject H1, Accept H0")
} else {
print("Reject H0, Accept H1")
}
####### (c) #######
# According to (a), we have calculated expected frequencies
# Now we can calcualte residual by (frequencies - expected values)
resi11 <- 7 - e11; resi12 <- 7 - e12; resi13 <- 1 - e13;
resi21 <- 6 - e21; resi22 <- 14 - e22; resi23 <- 7 - e23;
# Calculate standard residual by [residual / sqrt(expected value)]
s_resi11 <- resi11/sqrt(e11); s_resi12 <- resi12/sqrt(e12);
s_resi13 <- resi13/sqrt(e13)
s_resi21 <- resi21/sqrt(e21); s_resi22 <- resi22/sqrt(e22);
s_resi23 <- resi23/sqrt(e23)
# Print and check the results
cat(s_resi11, s_resi12, s_resi13,"\n", s_resi21, s_resi22, s_resi23)
####### (d) #######
# Draw a heat map to visualize the differences between standard residual
# Make a matrix about standard residual
s_resi_mat <- matrix(
c(s_resi11, s_resi12, s_resi13, s_resi21, s_resi22, s_resi23),
nrow = 2, ncol = 3, byrow = TRUE)
# Give colnames and rownames in matrix
colnames(s_resi_mat) <- c("Bribe requested", "Not stopped", "Stopped warning")
rownames(s_resi_mat) <- c("Lower class", "Upper class")
# Transfer matrix into long data table to draw ggplot picture
s_resi_long <- melt(s_resi_mat)
print(s_resi_long)
# Use ggplot to draw heatmap
s_resi_heatmap <- ggplot(s_resi_long, aes(x=Var2, y=Var1)) +
geom_tile(aes(fill=value), color="black", size=0.3) +
scale_fill_gradient(low="#D0E7D2", high="#618264") +
labs(title="Heatmap: Standard Residual",
x="Bribe Type", y="Class Type") +
theme_bw()
print(s_resi_heatmap)
############## Question 2 ##############
####### (a) #######
####### (b) #######
# Import data from website link
df <- readr::read_csv(
"https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# Set regression's dependent variable and independent variable
reg_y <- df$water; reg_x <- df$reserved
# Because the independent variable is categorical,
# so draw a bar plot instad of scatter
# Draw a scatter to see differences between these two variables
# Create a data frame about mean and upper, lower ci
reg_mean_ci <- aggregate(reg_y ~ reg_x, data=df, FUN=function(x){
mea_y <- mean(x)
ci <- t.test(x)$conf.int
return <- (c(mea_y, ci[1], ci[2]))
})
# Create x and y for point plot
sca_x <- c("0", "1"); sca_y <- c(14.74, 23.99)
# Create lowerci and upperci for point plot
lower_ci <- reg_mean_ci$reg_y[,2]; upper_ci <- reg_mean_ci$reg_y[,3]
reg_sca <- ggplot(reg_mean_ci, aes(x=sca_x, y=sca_y)) +
geom_point() +
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci), width=0.2) +
labs(x="Reversed", y="Mean of Water",
title="New Repaired Drinking-water Facilities Group by Reserved") +
scale_x_discrete(labels=c("No", "Yes")) +
ylim(0,35) +
theme_bw()
reg_sca
# Create a regression model
reg_mod <- lm(reg_y ~ reg_x, data=df)
summary(reg_mod)
3 != 1
x = 3
x = 3
x == 3
x <- 3
y = c(x, "x", TRUE, 5)
x <- 3
y <- c(x, "x", TRUE, 5)
z <- y[3]
z
typeof(1.323)
typeof(1)
typeof(1L)
as.numeric(y)
is.numeric(y)
NA == NA
NULL == NULL
print("Hello")
print(Hello)
# Given data
estimate_GDP <- -0.9998
se_GDP <- 0.00012
alpha <- 0.05
n <- 1000  # Sample size, here it's an example value
# Calculate the critical value from the t distribution
t_critical <- qt(1 - alpha / 2, df = n - 4)  # There are 4 coefficients in the model
# Calculate the lower and upper bounds of the confidence interval
lower_bound <- estimate_GDP - t_critical * se_GDP
upper_bound <- estimate_GDP + t_critical * se_GDP
# Print the results
cat("95% Confidence Interval:", lower_bound, "to", upper_bound, "\n")
# Check if it includes 0
if (lower_bound <= 0 && upper_bound >= 0) {
cat("The confidence interval includes 0, supporting the null hypothesis.\n")
} else {
cat("The confidence interval does not include 0, suggesting a potential rejection of the null hypothesis.\n")
}
# import pwr
library(pwr)
# set alpha, power and effect size
alpha <- 0.05
power <- 0.8
effect_size <- 0.48
# calculate sample size
sample_size <- pwr.t.test(d = effect_size,
sig.level = alpha,
power = power,
type = "two.sample")$n
# print
print(paste("Required sample size per group:", sample_size))
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list = ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list) > 0) for (package in package.list) detach(package, character.only = TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg) {
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"), pkgTest)
lapply(c("readxl",
"ggplot2", "ggforce", "ggthemes", "patchwork",
"dplyr",
"tidyr",
"ggbreak",
"sf" # for shp
), pkgTest)
#####################
# Here is all the palette
#####################
# Les Peupliers - Monet
palette <- c("#E0D7C1", "#97B0C0", "#90A796", "#627F44")
# Wheat Field with Sheaves and a Windmill - Van Gogh
palette <- c("#EACE22", "#D9A615", "#8E6124", "#343660")
# Cloudy Wheat Field - Van Gogh
palette <- c("#CDDCDA", "#B2CCB3", "#769692", "#4C6AA8")
# The Starry Night - Van Gogh
palette <- c("#FBF1D8", "#FCE468", "#5F93DE", "#323A7E")
# Woman with a Parasol - Monet
palette <- c("#EFE5BF", "#8DACC1", "#A5AF3F", "#284020")
# - Monet
palette <- c("#C4B3C0", "#86391E", "#798A35", "#516259")
# Lottes - Monet
palette <- c("#443D6A", "#6C8EB8", "#9E7585", "#DCC39C")
# Apple tree - Monet
palette <- c("#F3EDCA", "#C8D3F9", "#A8AE5E", "#0A371C")
# Low Tide at Pourville, near Dieppe- Monet
palette <- c("#F4DF97", "#B49971", "#6C9BAC", "#196397")
# Conversation - Bato
palette <- c("#EBD1B7", "#A19DB3", "#535786", "#7A4A42")
# Stable Item - Bato
palette <- c("#EEDAE5", "#FBDD82", "#C94E2F", "#6D90ED")
# set dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_excel("../01_data/Irish_19th_century_data.xlsx", sheet = 1)
shp <- st_read("../01_data/county_boundaries/Administrative_Areas_-_Ungen_2019.shp")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = c("COUNTY_POP" = "CONUTY"))
shp <- shp %>% left_join(pop, by = c("COUNTY" = "CONUTY"))
shp <- shp %>% left_join(pop, by = c("PROVINCE" = "PROVINCE"))
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
View(shp)
source("main.R")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
# 1841 heatmap
map_1841 <- ggplot(shp) +
geom_sf(aes(fill = Population_1841)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1841)")
# 1851 heatmap
map_1851 <- ggplot(shp) +
geom_sf(aes(fill = Population_1851)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1851)")
# combine two maps
combined_map <- map_1841 + map_1851
print(combined_map)
source("main.R")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
# 1841 heatmap
map_1841 <- ggplot(shp) +
geom_sf(aes(fill = 1841POP)) +
source("main.R")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
# 1841 heatmap
map_1841 <- ggplot(shp) +
geom_sf(aes(fill = POP1841)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1841)")
# 1851 heatmap
map_1851 <- ggplot(shp) +
geom_sf(aes(fill = POP1851)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1851)")
# combine two maps
combined_map <- map_1841 + map_1851
print(combined_map)
source("main.R")
shp <- st_read("../01_data/province_boundaries/Province_Boundaries_Ungeneralised_-_National_Administrative_Boundaries_-_2015.shp")
pop <- read_excel("../01_data/Irish_census_1841-1851.xlsx")
shp <- shp %>% left_join(pop, by = "PROVINCE")
# 1841 heatmap
map_1841 <- ggplot(shp) +
geom_sf(aes(fill = POP1841)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1841)")
# 1851 heatmap
map_1851 <- ggplot(shp) +
geom_sf(aes(fill = POP1851)) +
scale_fill_viridis_c() +
theme_bw() +
ggtitle("Population Heatmap by Province (1851)")
# combine two maps
combined_map <- map_1841 + map_1851
print(combined_map)
#ggplot(shp) +
#  geom_sf() +
#  theme_bw()
