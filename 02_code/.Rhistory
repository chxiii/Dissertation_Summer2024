# lapply(c("stringr"), pkgTest)
lapply(c("readxl", "reshape2", # import data
"stargazer", # export regression results to LaTeX
"zoo", "mice", # to deal with missing value
"MetBrewer", # visualisation colour package
"ggplot2", "ggforce", "ggthemes", "patchwork", "ggpubr", "gg.gap",
"rnaturalearth", "rnaturalearthdata",
"dplyr", "tidyr",
"ggbreak",
"sf", "digest", "osmdata", "ggrepel", "cowplot", # for shp
"car", # vif
"mgcv", "ggcorrplot", "Hmisc", # GAM
"forestplot", "broom" # forest plot
), pkgTest)
options(scipen = 200)
#####################
# Here is all the palette
#####################
# Les Peupliers - Monet
palette <- c("#E0D7C1", "#97B0C0", "#90A796", "#627F44")
# Wheat Field with Sheaves and a Windmill - Van Gogh
palette <- c("#EACE22", "#D9A615", "#8E6124", "#343660")
# Cloudy Wheat Field - Van Gogh
palette <- c("#CDDCDA", "#B2CCB3", "#769692", "#4C6AA8")
# The Starry Night - Van Gogh
palette <- c("#FBF1D8", "#FCE468", "#5F93DE", "#323A7E")
# Woman with a Parasol - Monet
palette <- c("#EFE5BF", "#8DACC1", "#A5AF3F", "#284020")
# - Monet
palette <- c("#C4B3C0", "#86391E", "#798A35", "#516259")
# Lottes - Monet
palette <- c("#443D6A", "#6C8EB8", "#9E7585", "#DCC39C")
# Apple tree - Monet
palette <- c("#F3EDCA", "#C8D3F9", "#A8AE5E", "#0A371C")
# Low Tide at Pourville, near Dieppe- Monet
palette <- c("#F4DF97", "#B49971", "#6C9BAC", "#196397")
# Conversation - Bato
palette <- c("#EBD1B7", "#A19DB3", "#535786", "#7A4A42")
# Stable Item - Bato
palette <- c("#EEDAE5", "#FBDD82", "#C94E2F", "#6D90ED")
# set dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_excel("../01_data/Irish_19th_century_data.xlsx", sheet = 1)
df <- mice(df, method = 'pmm', m = 5, seed = 42)
df <- complete(df, 1)
df$grain_price_other <- df$wheat_price + df$oat_price + df$barley_price
df$grain_acre_total <- df$potato_acre + df$wheat_acre + df$oat_acre + df$barley_acre
df$imports_total <- df$wheat_imports + df$barley_imports + df$oat_imports
index <- df$imports_total[1]
scale.f <- 100 / index
df$imports_total <- df$imports_total * scale.f
df$exports_total <- df$wheat_exports + df$barley_exports + df$oat_exports
summary(df)
ggsave("../03_outputs/smoothterm.pdf",
plot = smooth.visual, dpi = 300, width = 7, height = 5)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
source("main.R")
reg.lin <- lm(popgap ~ potato_price + grain_price_other +
ground_rent + factor(if_tithe) +
general_wage +
imports_total + exports_total + factor(poorlaw),
data = df)
AIC(reg.lin)
summary(reg.lin)
stargazer(reg.lin)
vif(reg.lin)
reg.ori.gam <- gam(popgap ~ potato_price + s(grain_price_other) + # H1
ground_rent + factor(if_tithe) +  # H2
s(general_wage) + # H3
factor(poorlaw) + # H4
imports_total + s(exports_total), # Control variables
data = df)
summary(reg.ori.gam)
gam.check(reg.ori.gam)
# Assuming reg.ori.gam is your fitted model
fit <- fitted(reg.ori.gam)
res <- residuals(reg.ori.gam)
# Residuals vs Fitted Plot
p1.res <- ggplot(data = data.frame(Fitted = fit, Residuals = res), aes(x = Fitted, y = Residuals)) +
geom_point(color = met.brewer("Monet")[7], shape = 1) +
# geom_smooth(method = "loess", se = FALSE, color = met.brewer("Monet")[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "P1.Residuals", x = "Fitted Values", y = "Residuals") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(p1.res)
# QQ plot
p2.qq <- ggplot(data = data.frame(sample = res), aes(sample = sample)) +
stat_qq(color = met.brewer("Monet")[7], shape = 1) +
stat_qq_line(color = met.brewer("Monet")[6]) +
labs(title = "P2.Q-Q", x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(p2.qq)
resp <- reg.ori.gam$y  # assuming your response variable is the one used in the model
# Response vs Fitted Plot
p3.resp <- ggplot(data = data.frame(Fitted = fit, Response = resp), aes(x = Fitted, y = Response)) +
geom_point(color = met.brewer("Monet")[7], shape = 1) +
# geom_smooth(method = "loess", se = FALSE, color = met.brewer("Monet")[6]) +
labs(title = "P3.Response", x = "Fitted Values", y = "Response") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(p3.resp)
p4.reshist <- ggplot(data = data.frame(Residuals = res), aes(x = Residuals)) +
geom_histogram(binwidth = 0.4, color = "black", fill = met.brewer("Monet")[8]) +
labs(title = "P4.HistResiduals", x = "Residuals", y = "Frequency") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(p4.reshist)
regcheck <- p1.res + p2.qq + p3.resp + p4.reshist +
plot_layout(ncol = 2)
print(regcheck)
ggsave("../03_outputs/regcheck.pdf",
plot = regcheck, dpi = 300, width = 7, height = 5)
# Rebute FAD Theory
reg.fad.lm <- lm(popgap ~ grain_acre_total + exports_total + imports_total, data = df)
AIC(reg.fad.lm)
summary(reg.fad.lm)
stargazer(reg.fad.lm)
# visualisation smooth term
smooth_pred <- predict(reg.ori.gam, type = "terms", se.fit = TRUE)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage,
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.grainprice)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
smooth.visual <- s.grainprice + s.generalw +
plot_layout(ncol = 2, widths = c(1, 1))
print(smooth.visual)
ggsave("../03_outputs/smoothterm.pdf",
plot = smooth.visual, dpi = 300, width = 7, height = 5)
ggsave("../03_outputs/smoothterm.pdf",
plot = smooth.visual, dpi = 300, width = 10, height = 4)
ggsave("../03_outputs/smoothterm.pdf",
plot = smooth.visual, dpi = 300, width = 9, height = 4)
plot(reg.ori.gam)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
new_general_wage <- seq(min(df$general_wage), max(df$general_wage), length.out = 300)
new_data <- data.frame(general_wage = new_general_wage)
# 使用新的数据框进行预测
smooth_pred <- predict(reg.ori.gam, newdata = new_data, type = "terms", se.fit = TRUE)
smooth_df <- data.frame(
general_wage = new_data$general_wage,
fit = smooth_pred$fit[, "s(general_wage)"],
lower = smooth_pred$fit[, "s(general_wage)"] - 1.96 * smooth_pred$se.fit[, "s(general_wage)"],
upper = smooth_pred$fit[, "s(general_wage)"] + 1.96 * smooth_pred$se.fit[, "s(general_wage)"]
)
new_data <- data.frame(general_wage = new_general_wage)
# 使用新的数据框进行预测
smooth_pred <- predict(reg.ori.gam, newdata = new_data, type = "terms", se.fit = TRUE)
# 使用新的数据框进行预测
smooth_pred <- predict(reg.ori.gam, newdata = new_data, type = "terms", se.fit = TRUE)
View(smooth_df)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = seq(min(df$general_wage), max(df$general_wage), length.out = 300),
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = seq(min(df$general_wage), max(df$general_wage), length.out = 80),
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.grainprice)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = seq(min(df$general_wage), max(df$general_wage), length.out = 18),
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = seq(min(df$general_wage), max(df$general_wage)),
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage,
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.grainprice)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage<40,
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.grainprice)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
smooth_pred <- predict(reg.ori.gam, type = "terms", se.fit = TRUE)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage,
exports_total = df$exports_total,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
fit_exports_total = smooth_pred$fit[, "s(exports_total)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
se_exports_total = smooth_pred$se.fit[, "s(exports_total)"]
)
# 创建一个新的数据框，其中 general_wage 的值从最小到最大均匀分布
new_general_wage <- seq(min(df$general_wage), max(df$general_wage), length.out = 500)
new_data <- data.frame(general_wage = new_general_wage)
# 使用新的数据框进行预测
# 假设 'reg.ori.gam' 是仅对 general_wage 进行建模的简化模型
smooth_pred_new <- predict(reg.ori.gam, newdata = new_data, type = "terms", se.fit = TRUE)
smooth_pred <- predict(reg.ori.gam, type = "terms", se.fit = TRUE)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"],
)
smooth_df <- data.frame(
grain_price_other = df$grain_price_other,
general_wage = df$general_wage,
fit_grain_price_other = smooth_pred$fit[, "s(grain_price_other)"],
fit_general_wage = smooth_pred$fit[, "s(general_wage)"],
se_grain_price_other = smooth_pred$se.fit[, "s(grain_price_other)"],
se_general_wage = smooth_pred$se.fit[, "s(general_wage)"]
)
# grain price
s.grainprice <- ggplot(smooth_df, aes(x = grain_price_other, y = fit_grain_price_other)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_grain_price_other + 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_grain_price_other - 1.96 * se_grain_price_other),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(grain_price_other)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.grainprice)
s.generalw <- ggplot(smooth_df, aes(x = general_wage, y = fit_general_wage)) +
# fit line
geom_line(color = met.brewer("Kandinsky")[4], size = 0.5) +
# upper line
geom_line(aes(y = fit_general_wage + 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
# lower line
geom_line(aes(y = fit_general_wage - 1.96 * se_general_wage),
color = met.brewer("Kandinsky")[2],
linetype = "dashed",
size = 0.5) +
geom_rug(sides = "b", color = met.brewer("Kandinsky")[1]) +
labs(title = "Smooth Term: s(general_wage)", x = "grain_price_other", y = "Effect") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank())
print(s.generalw)
plot(reg.ori.gam)
